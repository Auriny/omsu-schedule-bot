package ru.auriny.omsuschedulebot.bot;

import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.auriny.omsuschedulebot.model.TelegramUser;
import ru.auriny.omsuschedulebot.model.api.Group;
import ru.auriny.omsuschedulebot.repository.UserRepository;
import ru.auriny.omsuschedulebot.service.KeyboardService;
import ru.auriny.omsuschedulebot.service.NotificationService;
import ru.auriny.omsuschedulebot.service.OmsuApiService;
import ru.auriny.omsuschedulebot.service.ScheduleService;

import java.io.Serializable;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;

@Component
public class Bot extends TelegramLongPollingBot {
    @Value("${telegram.bot.username}") private String botUsername;

    private final Map<Long, Boolean> userAwaitingTime = new ConcurrentHashMap<>();

    private final OmsuApiService omsuApiService;
    private final ScheduleService scheduleService;
    private final UserRepository userRepository;
    private final NotificationService notificationService;
    private final KeyboardService keyboardService;

    public Bot(@Value("${telegram.bot.token}") String botToken, OmsuApiService omsuApiService, ScheduleService scheduleService, UserRepository userRepository, NotificationService notificationService, KeyboardService keyboardService) {
        super(botToken);

        this.omsuApiService = omsuApiService;
        this.scheduleService = scheduleService;
        this.userRepository = userRepository;
        this.notificationService = notificationService;
        this.keyboardService = keyboardService;
    }

    @PostConstruct
    public void init() {
        notificationService.setScheduleBot(this);
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasCallbackQuery()) {
            handleCallbackQuery(update.getCallbackQuery());
        } else if (update.hasMessage() && update.getMessage().hasText()) {
            handleTextMessage(update.getMessage());
        }
    }

    private void handleTextMessage(Message message) {
        long chatId = message.getChatId();
        String messageText = message.getText();
        TelegramUser user = userRepository.findById(chatId).orElseGet(() -> registerUser(message));

        if (messageText.startsWith("/")) {
            handleCommand(user, messageText);
            return;
        }

        if (TelegramUser.STATE_AWAITING_GROUP.equals(user.getUserState())) {
            handleGroupInput(user, messageText);
            return;
        }
        if (userAwaitingTime.getOrDefault(chatId, false)) {
            handleTimeInput(user, messageText);
            return;
        }

        String command = switch (messageText) {
            case "‚è∞ –°–µ–≥–æ–¥–Ω—è" -> "/today";
            case "üìÖ –ó–∞–≤—Ç—Ä–∞" -> "/tomorrow";
            case "Ô∏èüóìÔ∏è –ù–µ–¥–µ–ª—è" -> "/week";
            case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" -> "/settings";
            default -> messageText;
        };

        if (command.startsWith("/")) {
            handleCommand(user, command);
        } else sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.");
    }

    private void handleGroupInput(TelegramUser user, String groupName) {
        List<Group> allGroups = omsuApiService.fetchAllGroups();
        Optional<Group> foundGroup = allGroups.stream()
                .filter(g -> g.getName().equalsIgnoreCase(groupName.trim()))
                .findFirst();

        if (foundGroup.isPresent()) {
            user.setGroupId(foundGroup.get().getId());
            user.setGroupName(foundGroup.get().getName());
            user.setUserState(TelegramUser.STATE_REGISTERED);
            userRepository.save(user);

            SendMessage msg = new SendMessage(String.valueOf(user.getChatId()),
                    "‚úÖ *–û—Ç–ª–∏—á–Ω–æ*! –¢–≤–æ—è –≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: `" + user.getGroupName() + "`.\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–∑ –º–µ–Ω—é.");
            msg.setReplyMarkup(keyboardService.createMainMenuKeyboard());
            sendMessage(msg);
        } else sendMessage(user.getChatId(), "‚ùå *–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: `–ú–ü–ë-501-–û-03`");
    }

    private void handleCommand(TelegramUser user, String command) {
        long chatId = user.getChatId();

        if (command.equals("/start")) {
            if (user.getGroupId() == null) {
                sendMessage(chatId, """
                    *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üêæ*
                    
                    –Ø –ø–æ–º–æ–≥–∞—é —Å—Ç—É–¥–µ–Ω—Ç–∞–º —É–¥–æ–±–Ω–µ–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:
                    „Éª –ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä—è–º–æ –∏–∑ —Ç–µ–ª–µ–≥–∏
                    „Éª –°–∫–∏–¥—ã–≤–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Å –≤–µ—á–µ—Ä–∞
                    „Éª –£–≤–µ–¥–æ–º–ª—è—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
                    
                    –ß—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –ø–æ–º–æ–≥–∞—Ç—å –∏ —Ç–µ–±–µ, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ—é –≥—Ä—É–ø–ø—É.
                    *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ—ë –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.*
                    –ù–∞–ø—Ä–∏–º–µ—Ä: `–ú–ü–ë-501-–û-03`
                    
                    *–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥ (–¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã):*
                    „Éª /today - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                    „Éª /tomorrow - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                    „Éª /week - —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
                    „Éª /setgroup - –ø–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É
                    „Éª /settings - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞
                    """);
            } else {
                String welcomeBackText = String.format("""
                    *–ú—è—É! –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üêæ*
                    
                    –Ø –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É —Å–ª–µ–∂—É –∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã: `%s`
                    –ü—Ä–æ—Å—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
                    
                    *–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥:*
                    „Éª /today - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                    „Éª /tomorrow - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                    „Éª /week - —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
                    „Éª /setgroup - –ø–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É
                    „Éª /settings - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞
                    """, user.getGroupName());

                SendMessage msg = new SendMessage(String.valueOf(chatId), welcomeBackText);
                msg.setReplyMarkup(keyboardService.createMainMenuKeyboard());
                sendMessage(msg);
            }

            keyboardService.createMainMenuKeyboard();
            return;
        }

        if (command.equals("/setgroup")) {
            user.setUserState(TelegramUser.STATE_AWAITING_GROUP);
            userRepository.save(user);
            sendMessage(chatId, "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø–æ–º–µ–Ω—è–µ–º —Ç–≤–æ—é –≥—Ä—É–ø–ø—É! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.");
            return;
        }

        if (user.getGroupId() == null) {
            sendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–≤–æ—é –≥—Ä—É–ø–ø—É. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!");
            return;
        }

        switch (command) {
            case "/settings" -> showSettings(chatId);
            case "/today" -> sendScheduleForDate(chatId, LocalDate.now());
            case "/tomorrow" -> sendScheduleForDate(chatId, LocalDate.now().plusDays(1));
            case "/week" -> showWeekSchedule(chatId, LocalDate.now());
        }
    }

    private void sendScheduleForDate(long chatId, LocalDate date) {
        userRepository.findById(chatId).ifPresent(user ->
                omsuApiService.fetchScheduleForGroup(user.getGroupId()).ifPresentOrElse(response -> {
                    String text = scheduleService.getFormattedScheduleForDate(response.getData(), date);
                    SendMessage message = new SendMessage(String.valueOf(chatId), text);
                    message.setReplyMarkup(keyboardService.createDayNavigationKeyboard(date));
                    sendMessage(message);
                }, () -> sendMessage(chatId, "–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å eservice. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —É—Ö–æ–¥–∏—Ç, –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –±–æ—Ç–∞ - @auriny."))
        );
    }

    private void handleTimeInput(TelegramUser user, String text) {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("H:m");
            LocalTime newTime = LocalTime.parse(text.trim(), formatter);
            String formattedTime = newTime.format(DateTimeFormatter.ofPattern("HH:mm"));

            user.setNotificationTime(formattedTime);
            userRepository.save(user);

            sendMessage(user.getChatId(), "‚úÖ –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ `" + formattedTime + "`");
            userAwaitingTime.remove(user.getChatId());
            showSettings(user.getChatId());
        } catch (DateTimeParseException e) {
            sendMessage(user.getChatId(), "‚ùå *–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é!* –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ß–ß:–ú–ú`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `21:30`.");
        }
    }

    private void handleCallbackQuery(CallbackQuery callbackQuery) {
        long chatId = callbackQuery.getMessage().getChatId();
        long messageId = callbackQuery.getMessage().getMessageId();
        String callbackData = callbackQuery.getData();

        if (callbackData.startsWith("week_nav:")) {
            LocalDate weekStartDate = LocalDate.parse(callbackData.split(":")[1], DateTimeFormatter.ISO_LOCAL_DATE);
            updateWeekSchedule(chatId, messageId, weekStartDate);
            return;
        }
        if (callbackData.startsWith("day_nav:")) {
            LocalDate date = LocalDate.parse(callbackData.split(":")[1], DateTimeFormatter.ISO_LOCAL_DATE);
            updateDaySchedule(chatId, messageId, date);
            return;
        }

        TelegramUser user = userRepository.findById(chatId).orElse(null);
        if (user == null) return;

        switch (callbackData) {
            case "toggle_daily" -> user.setDailyNotificationEnabled(!user.isDailyNotificationEnabled());
            case "toggle_updates" -> user.setUpdateNotificationEnabled(!user.isUpdateNotificationEnabled());
            case "change_time" -> {
                userAwaitingTime.put(chatId, true);
                sendMessage(chatId, "‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ß–ß:–ú–ú`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `21:30`.");
                return;
            }
        }
        userRepository.save(user);
        updateSettingsMessage(chatId, messageId, user);
    }

    private void updateDaySchedule(long chatId, long messageId, LocalDate date) {
        userRepository.findById(chatId).ifPresent(user ->
                omsuApiService.fetchScheduleForGroup(user.getGroupId()).ifPresent(response -> {
                    String text = scheduleService.getFormattedScheduleForDate(response.getData(), date);
                    EditMessageText editedMessage = new EditMessageText();
                    editedMessage.setChatId(chatId);
                    editedMessage.setMessageId((int) messageId);
                    editedMessage.setText(text);
                    editedMessage.setReplyMarkup(keyboardService.createDayNavigationKeyboard(date));
                    tryExecute(editedMessage);
                })
        );
    }

    private void showWeekSchedule(long chatId, LocalDate dateInWeek) {
        LocalDate monday = dateInWeek.with(DayOfWeek.MONDAY);
        userRepository.findById(chatId).ifPresent(user ->
                omsuApiService.fetchScheduleForGroup(user.getGroupId()).ifPresent(response -> {
                    String text = scheduleService.getFormattedWeekSchedule(response.getData(), monday);
                    SendMessage message = new SendMessage(String.valueOf(chatId), text);
                    message.setReplyMarkup(keyboardService.createWeekNavigationKeyboard(monday));
                    sendMessage(message);
                })
        );
    }

    private void updateWeekSchedule(long chatId, long messageId, LocalDate dateInWeek) {
        LocalDate monday = dateInWeek.with(DayOfWeek.MONDAY);
        userRepository.findById(chatId).ifPresent(user ->
                omsuApiService.fetchScheduleForGroup(user.getGroupId()).ifPresent(response -> {
                    String text = scheduleService.getFormattedWeekSchedule(response.getData(), monday);
                    EditMessageText editedMessage = new EditMessageText();
                    editedMessage.setChatId(chatId);
                    editedMessage.setMessageId((int) messageId);
                    editedMessage.setText(text);
                    editedMessage.setParseMode("Markdown");
                    editedMessage.setReplyMarkup(keyboardService.createWeekNavigationKeyboard(monday));
                    tryExecute(editedMessage);
                })
        );
    }

    private void showSettings(long chatId) {
        userRepository.findById(chatId).ifPresent(user -> {
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π*\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å.");
            message.setParseMode("Markdown");
            message.setReplyMarkup(keyboardService.createSettingsMenu(user));
            sendMessage(message);
        });
    }

    private void updateSettingsMessage(long chatId, long messageId, TelegramUser user) {
        EditMessageText editedMessage = new EditMessageText();
        editedMessage.setChatId(chatId);
        editedMessage.setMessageId((int) messageId);
        editedMessage.setText("‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π*\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å.");
        editedMessage.setParseMode("Markdown");
        editedMessage.setReplyMarkup(keyboardService.createSettingsMenu(user));
        tryExecute(editedMessage);
    }

    private TelegramUser registerUser(Message message) {
        return userRepository.findById(message.getChatId()).orElseGet(() -> {
            TelegramUser newUser = new TelegramUser();
            newUser.setChatId(message.getChatId());
            newUser.setFirstName(message.getFrom().getFirstName());
            newUser.setUsername(message.getFrom().getUserName());
            return userRepository.save(newUser);
        });
    }

    public void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setParseMode("Markdown");
        tryExecute(message);
    }

    public void sendMessage(SendMessage message) {
        message.setParseMode("Markdown");
        tryExecute(message);
    }

    private <T extends Serializable, Method extends BotApiMethod<T>> void tryExecute(Method method) {
        if (method instanceof SendMessage sendMessage) {
            sendMessage.setParseMode("Markdown");
        } else if (method instanceof EditMessageText editMessageText) {
            editMessageText.setParseMode("Markdown");
        }

        try {
            execute(method);
        } catch (TelegramApiException e) {
            if (e.getMessage().contains("message is not modified")) {
                System.out.println("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫ –æ—à–∏–±–∫–∏.");
            } else System.err.println("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–µ—Ç–æ–¥ API: " + e.getMessage());
        }
    }
}